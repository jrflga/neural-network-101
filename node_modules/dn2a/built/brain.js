"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Brain = undefined;

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _mathjs = require("mathjs");

var m = _interopRequireWildcard(_mathjs);

var _cerebrum = require("./cerebrum");

var _alpha = require("./networks/alpha");

var _neuron = require("./neuron");

var _synapse = require("./synapse");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Brain = function Brain(configuration) {
    this.configuration = configuration || {
        cerebrum: {
            generator: _cerebrum.Cerebrum,
            configuration: {
                minds: [{
                    name: "defaultMind",
                    network: {
                        generator: _alpha.NetworkAlpha,
                        configuration: {
                            layerDimensions: [2, 4, 1],
                            learningMode: "continuous",
                            learningRate: 0.3,
                            momentumRate: 0.7,
                            maximumError: 0.005,
                            maximumEpoch: 1000,
                            dataRepository: {},
                            neuron: {
                                generator: _neuron.Neuron
                            },
                            synapse: {
                                generator: _synapse.Synapse
                            },
                            numbersPrecision: 32
                        }
                    },
                    inputsFrom: ["cerebrum"]
                }],
                outputsFrom: ["defaultMind"]
            }
        }
    };

    if (!this.checkConfiguration()) {
        throw "Invalid Brain Module Configuration";
    }
    this.configuration = this.transformConfiguration();

    m.config({
        number: "BigNumber",
        precision: this.configuration.numbersPrecision
    });

    this.cerebrum = new this.configuration.cerebrum.generator(this.configuration.cerebrum.configuration);
};

Brain.prototype = {
    checkConfiguration: function checkConfiguration() {
        return true;
    },

    transformConfiguration: function transformConfiguration() {
        return this.configuration;
    }
};

exports.Brain = Brain;
