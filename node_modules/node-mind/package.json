{
  "_args": [
    [
      {
        "raw": "node-mind",
        "scope": null,
        "escapedName": "node-mind",
        "name": "node-mind",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/jrflga/Neural Networks 101"
    ]
  ],
  "_from": "node-mind@latest",
  "_id": "node-mind@0.2.1",
  "_inCache": true,
  "_location": "/node-mind",
  "_nodeVersion": "0.12.5",
  "_npmUser": {
    "name": "stevenmiller888",
    "email": "stevenmiller888@me.com"
  },
  "_npmVersion": "2.11.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-mind",
    "scope": null,
    "escapedName": "node-mind",
    "name": "node-mind",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-mind/-/node-mind-0.2.1.tgz",
  "_shasum": "310325f3ac149ad1bae2fea1b8449bc76c760269",
  "_shrinkwrap": null,
  "_spec": "node-mind",
  "_where": "/home/jrflga/Neural Networks 101",
  "author": {
    "name": "Steven Miller"
  },
  "bugs": {
    "url": "https://github.com/stevenmiller888/mind/issues"
  },
  "dependencies": {
    "emitter-component": "^1.1.1",
    "htan": "0.0.1",
    "htan-prime": "0.0.1",
    "node-matrix": "0.1.1",
    "samples": "0.0.1",
    "sigmoid": "0.0.1",
    "sigmoid-prime": "0.0.1"
  },
  "description": "A flexible neural network library",
  "devDependencies": {
    "eslint": "^0.22.1",
    "mind-xor": "0.0.3",
    "mocha": "2.x",
    "png-img": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "310325f3ac149ad1bae2fea1b8449bc76c760269",
    "tarball": "https://registry.npmjs.org/node-mind/-/node-mind-0.2.1.tgz"
  },
  "gitHead": "0eea3a28ea16569131193f534c07f7ceaa68e1d6",
  "homepage": "https://github.com/stevenmiller888/mind#readme",
  "keywords": [
    "machine-learning",
    "neural-network",
    "learning",
    "sigmoid",
    "network",
    "neuron",
    "neural",
    "mind",
    "nn"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "stevenmiller888",
      "email": "stevenmiller888@me.com"
    }
  ],
  "name": "node-mind",
  "optionalDependencies": {},
  "readme": "![Mind Logo](https://cldup.com/D1yUfBz7Iu.png)\n\nA flexible neural network library for Node.js and the browser. Check out a live [demo](http://www.mindjs.net/) of a movie recommendation engine built with Mind.\n\n[![NPM version][npm-image]][npm-url]\n[![build status][circle-image]][circle-url]\n[![license][license-image]][license-url]\n\n## Features\n\n- Vectorized - uses a matrix implementation to process training data\n- Configurable - allows you to customize the network topology\n- Pluggable - download/upload minds that have already learned\n\n## Installation\n\n    $ npm install node-mind\n\nYou can use Mind in the browser by requiring it with Duo or Browserify. Or you can simply use the prebuilt root `index.js` file directly, which will expose `Mind` on the `window` object.\n\n## Usage\n\n```js\nvar Mind = require('node-mind');\n\n/**\n * Letters.\n *\n * - Imagine these # and . represent black and white pixels.\n */\n\nvar a = character(\n  '.#####.' +\n  '#.....#' +\n  '#.....#' +\n  '#######' +\n  '#.....#' +\n  '#.....#' +\n  '#.....#'\n);\n\nvar b = character(\n  '######.' +\n  '#.....#' +\n  '#.....#' +\n  '######.' +\n  '#.....#' +\n  '#.....#' +\n  '######.'\n);\n\nvar c = character(\n  '#######' +\n  '#......' +\n  '#......' +\n  '#......' +\n  '#......' +\n  '#......' +\n  '#######'\n);\n\n/**\n * Learn the letters A through C.\n */\n\nvar mind = Mind()\n  .learn([\n    { input: a, output: map('a') },\n    { input: b, output: map('b') },\n    { input: c, output: map('c') }\n  ]);\n\n/**\n * Predict the letter C, even with a pixel off.\n */\n\nvar result = mind.predict(character(\n  '#######' +\n  '#......' +\n  '#......' +\n  '#......' +\n  '#......' +\n  '##.....' +\n  '#######'\n));\n\nconsole.log(result); // ~ 0.5\n\n/**\n * Turn the # into 1s and . into 0s.\n */\n\nfunction character(string) {\n  return string\n    .trim()\n    .split('')\n    .map(integer);\n\n  function integer(symbol) {\n    if ('#' === symbol) return 1;\n    if ('.' === symbol) return 0;\n  }\n}\n\n/**\n * Map letter to a number.\n */\n\nfunction map(letter) {\n  if (letter === 'a') return [ 0.1 ];\n  if (letter === 'b') return [ 0.3 ];\n  if (letter === 'c') return [ 0.5 ];\n  return 0;\n}\n```\n\n## Plugins\n\nUse plugins created by the Mind community to configure pre-trained networks that can go straight to making predictions.\n\nHere's a cool example of the way you could use a hypothetical `mind-ocr` plugin:\n\n```js\nvar Mind = require('node-mind');\nvar ocr = require('mind-ocr');\n\nvar mind = Mind()\n  .upload(ocr)\n  .predict(\n    '.#####.' +\n    '#.....#' +\n    '#.....#' +\n    '#######' +\n    '#.....#' +\n    '#.....#' +\n    '#.....#'\n  );\n```\n\nTo create a plugin, simply call `download` on your trained mind:\n\n```js\nvar Mind = require('node-mind');\n\nvar mind = Mind()\n  .learn([\n    { input: [0, 0], output: [ 0 ] },\n    { input: [0, 1], output: [ 1 ] },\n    { input: [1, 0], output: [ 1 ] },\n    { input: [1, 1], output: [ 0 ] }\n  ]);\n\nvar xor = mind.download();\n```\n\nHere's a list of available plugins:\n\n- [xor](https://github.com/stevenmiller888/mind-xor)\n\n## API\n\n### Mind(options)\nCreate a new instance of Mind that can learn to make predictions.\n\nThe available options are:\n* `activator`: the activation function to use, `sigmoid` or `htan`\n* `learningRate`: the speed at which the network will learn\n* `hiddenUnits`: the number of units in the hidden layer/s\n* `iterations`: the number of iterations to run\n* `hiddenLayers`: the number of hidden layers\n\n#### .learn()\n\nLearn from training data:\n\n```js\nmind.learn([\n  { input: [0, 0], output: [ 0 ] },\n  { input: [0, 1], output: [ 1 ] },\n  { input: [1, 0], output: [ 1 ] },\n  { input: [1, 1], output: [ 0 ] }\n]);\n```\n\n#### .predict()\n\nMake a prediction:\n\n```js\nmind.predict([0, 1]);\n```\n\n#### .download()\n\nDownload a mind:\n\n```js\nvar xor = mind.download();\n```\n\n#### .upload()\n\nUpload a mind:\n\n```js\nmind.upload(xor);\n```\n\n#### .on()\n\nListen for the 'data' event, which is fired with each iteration:\n\n```js\nmind.on('data', function(iteration, errors, results) {\n  // ...\n});\n```\n\n## Note\n\nIf you're interested in learning more about neural networks, you'll definitely want to check out these fantastic libraries:\n\n- [convnetjs](https://github.com/karpathy/convnetjs)\n- [synaptic](https://github.com/cazala/synaptic)\n- [brain](https://github.com/harthur/brain)\n\n## License\n\n[MIT](https://tldrlegal.com/license/mit-license)\n\n[npm-image]: https://img.shields.io/npm/v/node-mind.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/node-mind\n[circle-image]: https://img.shields.io/circleci/project/stevenmiller888/mind.svg\n[circle-url]: https://circleci.com/gh/stevenmiller888/mind\n[license-image]: https://img.shields.io/npm/l/express.svg\n[license-url]: https://tldrlegal.com/license/mit-license\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stevenmiller888/mind.git"
  },
  "scripts": {},
  "version": "0.2.1"
}
